-- Crear la base de datos
CREATE DATABASE IF NOT EXISTS PUNTO_DE_VENTA;

USE PUNTO_DE_VENTA;

-- Tabla: productos
CREATE TABLE IF NOT EXISTS PRODUCTOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(255) NOT NULL,
    DESCRIPCION TEXT,
    PRECIO DECIMAL(10, 2) NOT NULL,
    PRECIO_ALTERNATIVO DECIMAL(10, 2), -- Precio alternativo (por ejemplo, delivery)
    PUNTOS_SUMA INT DEFAULT 0, -- Puntos que este producto acumula al cliente
    CANTIDAD_STOCK INT NOT NULL, -- Cantidad en stock
    CREADO_EN TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla: clientes
CREATE TABLE IF NOT EXISTS CLIENTES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    APELLIDO VARCHAR(100) NOT NULL,
    DIRECCION VARCHAR(255),
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    TELEFONO VARCHAR(20),
    PUNTOS_ACUMULADOS INT DEFAULT 0, -- Puntos acumulados por el cliente
    CREADO_EN TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla: turnos
CREATE TABLE IF NOT EXISTS TURNOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USUARIO VARCHAR(100) NOT NULL,
    FONDO_INICIAL DECIMAL(10, 2) NOT NULL,
    FONDO_FINAL DECIMAL(10, 2),
    ESTADO ENUM('abierto', 'cerrado') DEFAULT 'abierto', -- Estado del turno
    ACTIVO TINYINT(1) DEFAULT 0, -- Turno activo/inactivo
    INICIO DATETIME NOT NULL,
    CIERRE DATETIME,
    CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Tabla de usuarios
CREATE TABLE IF NOT EXISTS USUARIOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    USERNAME VARCHAR(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL, -- Se guardará encriptado
    CREADO_EN TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Modificar la tabla turnos para relacionarla con usuarios
ALTER TABLE TURNOS
    ADD COLUMN USUARIO_ID INT, ADD FOREIGN KEY (
        USUARIO_ID
    )
        REFERENCES USUARIOS(
            ID
        ) ON DELETE SET NULL;

-- Tabla: metodos_pago
CREATE TABLE IF NOT EXISTS METODOS_PAGO (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(50) NOT NULL UNIQUE, -- Nombre del método de pago
    DESCRIPCION TEXT, -- Descripción opcional
    CREADO_EN TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla: ventas
CREATE TABLE IF NOT EXISTS VENTAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CLIENTE_ID INT, -- Cliente que realizó la compra
    METODO_PAGO_ID INT, -- Relación con la tabla de métodos de pago
    TURNO_ID INT, -- Relación con la tabla de turnos
    FECHA DATETIME NOT NULL,
    TOTAL DECIMAL(10, 2) NOT NULL,
    PUNTOS_GANADOS INT DEFAULT 0, -- Puntos ganados en esta venta
    FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(ID) ON DELETE SET NULL,
    FOREIGN KEY (METODO_PAGO_ID) REFERENCES METODOS_PAGO(ID),
    FOREIGN KEY (TURNO_ID) REFERENCES TURNOS(ID) ON DELETE SET NULL
);

-- Tabla: productos_en_ventas
CREATE TABLE IF NOT EXISTS PRODUCTOS_EN_VENTAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    VENTA_ID INT NOT NULL,
    PRODUCTO_ID INT, -- Producto relacionado
    CANTIDAD INT NOT NULL, -- Cantidad de producto vendido
    PRECIO_UNITARIO DECIMAL(10, 2) NOT NULL,
    TOTAL DECIMAL(10, 2) NOT NULL, -- Total de este producto en la venta
    FOREIGN KEY (VENTA_ID) REFERENCES VENTAS(ID),
    FOREIGN KEY (PRODUCTO_ID) REFERENCES PRODUCTOS(ID) ON DELETE SET NULL
);

-- Tabla: fondos
CREATE TABLE IF NOT EXISTS FONDOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    TURNO_ID INT, -- Relación con la tabla de turnos
    FECHA DATETIME NOT NULL,
    DESCRIPCION TEXT, -- Motivo o descripción del fondo
    MONTO DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (TURNO_ID) REFERENCES TURNOS(ID) ON DELETE SET NULL
);

-- Tabla: retiros
CREATE TABLE IF NOT EXISTS RETIROS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    TURNO_ID INT, -- Relación con la tabla de turnos
    FECHA DATETIME NOT NULL,
    DESCRIPCION TEXT, -- Motivo o descripción del retiro
    MONTO DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (TURNO_ID) REFERENCES TURNOS(ID) ON DELETE SET NULL
);

-- Tabla: cierres
CREATE TABLE IF NOT EXISTS CIERRES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    TIPO VARCHAR(1) NOT NULL, -- 'X' para parcial, 'Z' para total
    TURNO_ID INT, -- Relación con la tabla de turnos
    FECHA DATETIME NOT NULL,
    TOTAL_VENTAS DECIMAL(10, 2) NOT NULL,
    TOTAL_RETIROS DECIMAL(10, 2) NOT NULL,
    EFECTIVO_CAJA DECIMAL(10, 2) NOT NULL, -- Dinero efectivo disponible en caja
    TOTAL_FINAL DECIMAL(10, 2) NOT NULL, -- Total después del cierre
    FOREIGN KEY (TURNO_ID) REFERENCES TURNOS(ID) ON DELETE SET NULL
);

-- Insertar métodos de pago iniciales
INSERT INTO METODOS_PAGO (
    NOMBRE,
    DESCRIPCION
) VALUES (
    'Efectivo',
    'Pago en efectivo'
),
(
    'Transferencia',
    'Pago mediante transferencia bancaria'
),
(
    'Tarjeta de Débito',
    'Pago con tarjeta de débito'
),
(
    'Tarjeta de Crédito',
    'Pago con tarjeta de crédito'
),
(
    'App Delivery',
    'Pago a través de la aplicación de delivery'
);

-- Modificar la tabla turnos para relacionarla con usuarios
ALTER TABLE TURNOS
    ADD COLUMN USUARIO_ID INT, ADD FOREIGN KEY (
        USUARIO_ID
    )
        REFERENCES USUARIOS(
            ID
        ) ON DELETE SET NULL;